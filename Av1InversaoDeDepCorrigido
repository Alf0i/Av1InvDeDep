using system;

public class Program{
    public static void Main(string[] args) {
        int count = 0;
        public Contador c = new Contador();
        while(true) {
            Count++;
            c.VerificaHoras(Count);
            if(c.VerificaHoras(Count) == 0){
                return false;
            }
        }

    }
}

public class Contador{
    int horas;
    public AlarmeInterface _al; /* Para que possa ser feita a correção devemos criar um atributo
        do tipo da interface.*/

    public Contador contador(int hora){
        this.horas = hora;
    }

    fun VerificaHoras(){
        if(horas == 17){

            return(_al.AcionarSom, _al.Vibrar); /* Vamos aplica-la no lugar da classe que herda
                dessa interface com suas funções.*/
        }
        else{
            return 0;
        }
    }

}

public interface AlarmeInterface{/*vamos criar uma interface para que "Contador" não possua 
    dependencia de "Alarme"*/
    public fun Vibrar(){}
    
    public fun AcionarSom(){}

}

public class Alarme: AlarmeInterface{/*vamos fazer com que "Alarme" herde da Interface criada.*/
    override fun Vibrar(){/*E daremos Override nas Funções.*/
        Console.WriteLine($" Vibrando!!!");
    }

    override fun AcionarSom(){
        Console.WriteLine($" trim-trim-trim...");
    }

}
